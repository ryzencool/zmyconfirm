一：简介
    org.springframework.context.ApplicationContext接口代表了SpringIOC容器，并且能够

实例化，配置，装配6.1节提到的beans。容器通过读取配置元数据来决定实例化，配置，装配哪些

beans。配置元数据可以表现为xml，java注解 ，或者java代码。他能让你表示出构成你的应用的

是哪些对象，并且这些对象之间之间丰富的依赖关系。

    spring还提供了ApplicationContext接口的一些实现。在独立的应用程序中经常会创建一些

ClassPathXMLApplicationContext 或者 FileSystemXMLApplicationContext的对象，尽管xml

是定义元数据的传统的一种形式，你也可以通过java注解或者java代码这些其他的方式搭配少量的

xml来构建容器。

    在大多数的应用场景中，在Spring IOC容器中现实的使用代码来实例化对象是没有必要的，例如，

在web应用程序中，在web.xml中8行左右的xml样板描述就已经够用了，如果你使用eclipse中的spring

tool suite环境通过点击和敲键救就能很容易创建配置的样板。

    下面这张图从打的方面来看Spring是如何工作的。在ApplicationContext创建并且实例化了了

之后，你自己的类就能和配置元数据绑定了，你就有了一个配置好的，可运行的系统或者应用。可以见

图（1）。

-----------------------------配置元数据---------------------------

    正如上图所示，这是一种Spring IOC容器使用配置元数据的一种形式，开发者能通过这份配置

元数据告诉容器如何实例化，配置，装配应用所需的对象。

    你也可以用其他配置元数据的形式。比如java注解，或者java代码。

    spring的配置由至少一个或者多个容器管理的对象的定义组成，基于xml的配置元数据展示了这

些beans是通过顶级的<beans>元素内置<bean>元素来配置而成的。基于java的配置使用在@Configuration

类中包含@Bean注解的方法。这些beans的定义适合构成应用的实际的对象相对应的。你可能会定义服务层

对象，dao层对象，比如structs Action对象的表现层对象，比如Hibernate SessionFactories,

JMS Queues这些底层对象。但是有一点，你不能通过这些来配置容器中的细粒度的域对象，因为

dao层和业务逻辑经常想创建和加载域对象，但是你可以使用AspectJ来配置容器无法控制的对象，下面

是一个基于xml的配置元数据。

            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd">
            <bean id="..." class="...">
            <!-- collaborators and configuration for this bean go here -->
            </bean>
            <bean id="..." class="...">
            <!-- collaborators and configuration for this bean go here -->
            </bean>
            <!-- more bean definitions go here -->
            </beans>

id属性用来区分bean，class属性定义了bean的类，并且它是使用全限定名的。id的值对应着一个对象，

本例中没有展示出这个对象。

------------------------------实例化容器--------------------------------：

	实例化一个spring ioc容器是十分直白的，提供给ApplicationContext构造器的本地的一个或者多
	
个路径也就是资源的字符串，允许容器从很多外部资源中加载配置元数据，这些外部资源包括比如本地

文件路径，java Classpath等等。

	ApplicationContext context = new ClassPathXmlApplicationContext(new String[] 
	{"services.xml", "daos.xml"});
	
下面的这个例子是service层对象的配置文件：

		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		<!-- services -->
		<bean id="petStore" class="org.springframework.samples.jpetstore.services.PetStoreServiceImpl">
		<property name="accountDao" ref="accountDao"/>
		<property name="itemDao" ref="itemDao"/>
		<!-- additional collaborators and configuration for this bean go here -->
		</bean>
		<!-- more bean definitions for services go here -->
		</beans>
		
下面这个例子是dao层对象的配置文件
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">
		<bean id="accountDao"
		class="org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao">
		<!-- additional collaborators and configuration for this bean go here -->
		</bean>
		<bean id="itemDao" class="org.springframework.samples.jpetstore.dao.jpa.JpaItemDao">
		<!-- additional collaborators and configuration for this bean go here -->
		</bean>
		<!-- more bean definitions for data access objects go here -->
		</beans>
		
在以上的例子中，service层包含了类PetStoreServiceImpl，并且两个dao对象JpaAccountDao类和JpaItemDao类

属性的名称对应的是javabean的属性，ref对应的是另外的bean的名字，id和ref之间的绑定告诉了我们协作对象

之间的依赖关系，想要知道更多的配置的细节，请看6.4 Dependencies。

----------------------------------构建基于xml的配置元数据------------------------------：

	在多个xml文件中定义bean是非常有用的，正常来说每个xml配置文件代表你的体系中的一个逻辑层次或者模块
例如：	
		<beans>
		<import resource="services.xml"/>
		<import resource="resources/messageSource.xml"/>
		<import resource="/resources/themeSource.xml"/>
		<bean id="bean1" class="..."/>
		<bean id="bean2" class="..."/>
		</beans>
在上述的一个例子中，外部的bean定义从service.xml,messageSource.xml,themeSource.xml中加载，所有的本地路径

所关联的定义文件都被导入了，所以service.xml和当前的xml文件要在同一个文件下，这里并没有在最前面写一个/,

但是这些路径都是有关联的，更好的格式是都不在最前面使用/,这些文件中的内容都被导入了，包括顶级元素<beans>,

这里必须是用spring的schema来保证xml文件的额有效性。

-------------------------------------使用容器----------------------------------------：
	ApplicationContext接口是一个能够维护不同的beans和她们之间的依赖的注册表的高级工厂，使用getbean（）方法
	
你能够取出你想要的beans

ApplicationContext能够让你读取bean定义兵器得到她们，如下所示：

		ApplicationContext context =
		new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});
		// retrieve configured instance
		PetStoreService service = context.getBean("petStore", PetStoreService.class);
		// use configured instance
		List<String> userList = service.getUsernameList();

你使用getbean（）方法得到beans的实例，ApplicationContext还有一些其他的方法能达到这个效果，但是不建议你使用。

事实上，你的应用代码是没有必要使用getbean（）这个方法的，所以没有spring API没有依赖，例如，在spring整合web

框架的时候，会实现依赖注入。


